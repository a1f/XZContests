CMakeListstxt(prefix) ::= <<
set(prefix <prefix>)

add_executable(${prefix}_main main.cpp main.h)

cxx_test(${prefix}_tests tests.cpp)
target_link_libraries(${prefix}_tests ${Boost_LIBRARIES})

add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/out.cpp
        COMMAND caide-inliner -t ${CMAKE_CURRENT_BINARY_DIR} -s ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp
        -o ${CMAKE_CURRENT_SOURCE_DIR}/out.cpp
        -- ${CLANG_INLINER_FLAGS} -I ${CMAKE_CURRENT_SOURCE_DIR})

set_source_files_properties(out.cpp PROPERTIES GENERATED TRUE)
add_executable(${prefix}_out out.cpp)
>>

mainh() ::= <<
#pragma once

#include "prelude.h"

void solve(istream& in, ostream& out) {
}
>>

maincpp() ::= <<
#include "main.h"

using namespace std;

int main() {
    solve(cin, cout);
    return 0;
}

>>

sample_test(prefix, sample, i) ::= <<
TEST(<prefix>, sample<i>) {
    string inString = testutil::trim(R"_TEST_(
<sample.input>
)_TEST_");
    string ansString = testutil::trim(R"_TEST_(
<sample.output>
)_TEST_");
//TODO
}
>>

testscpp(prefix, samples) ::= <<
#include "prelude.h"
#include "main.h"
#include "rand_util.h"
#include "test_util.h"

<samples : {sample | <sample_test(prefix, sample, i)>};  separator="\n\n">
>>